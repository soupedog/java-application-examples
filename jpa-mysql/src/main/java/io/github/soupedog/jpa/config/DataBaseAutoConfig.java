package io.github.soupedog.jpa.config;

import com.zaxxer.hikari.HikariDataSource;
import hygge.commons.spring.config.configuration.definition.HyggeAutoConfiguration;
import org.hibernate.cfg.AvailableSettings;
import org.hibernate.dialect.MySQL8Dialect;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.Database;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.persistence.ConstraintMode;
import javax.persistence.EntityManagerFactory;
import java.util.Map;

/**
 * @author Xavier
 * @date 2023/8/15
 * @since 1.0
 */
@EnableJpaAuditing
@EnableTransactionManagement
@EnableJpaRepositories(
        entityManagerFactoryRef = "webAppEntityManagerFactory",
        transactionManagerRef = "webAppTransactionManager",
        basePackages = {"io.github.soupedog.jpa.repository"},
        enableDefaultTransactions = true
)
@Configuration
@EnableConfigurationProperties(DatabaseConfiguration.class)
public class DataBaseAutoConfig implements HyggeAutoConfiguration {
    @Autowired
    private DatabaseConfiguration databaseConfiguration;

    @Bean("webAppDataSource")
    public HikariDataSource webAppDataSource() {
        HikariDataSource hikariDataSource = new HikariDataSource();
        hikariDataSource.setUsername(databaseConfiguration.getUserName());
        hikariDataSource.setPassword(databaseConfiguration.getPassword());
        hikariDataSource.setJdbcUrl(databaseConfiguration.getUrl());
        hikariDataSource.setDriverClassName(com.mysql.cj.jdbc.Driver.class.getName());

        hikariDataSource.setMaximumPoolSize(20);
        hikariDataSource.setMinimumIdle(1);
        hikariDataSource.setMaxLifetime(35000);
        hikariDataSource.setIdleTimeout(30000);
        return hikariDataSource;
    }

    @Bean("webAppEntityManagerFactory")
    public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean(@Qualifier("webAppDataSource") HikariDataSource hikariDataSource) {
        HibernateJpaVendorAdapter hibernateJpaVendorAdapter = new HibernateJpaVendorAdapter();
        // 是否开启 sql 执行语句监控
        hibernateJpaVendorAdapter.setShowSql(databaseConfiguration.getShowSql());
        // 是否根据扫描到的 @Entity 自动建表
        hibernateJpaVendorAdapter.setGenerateDdl(databaseConfiguration.getAutoGenerateDdl());
        // 设置数据库类型
        hibernateJpaVendorAdapter.setDatabase(Database.MYSQL);
        // 设置数据库方言 (此参数的 key 实际上是 "AvailableSettings.DIALECT" 其 value 可选项参见 "org.hibernate.dialect" 这个包下的类)
        hibernateJpaVendorAdapter.setDatabasePlatform(MySQL8Dialect.class.getName());

        LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();
        entityManagerFactoryBean.setDataSource(hikariDataSource);
        entityManagerFactoryBean.setJpaVendorAdapter(hibernateJpaVendorAdapter);
        entityManagerFactoryBean.setPackagesToScan("io.github.soupedog.jpa.domain.po");
        Map<String, Object> jpaPropertyMap = entityManagerFactoryBean.getJpaPropertyMap();
        // 当前事务已关闭也允许懒加载重新查询数据(主线逻辑完成后关闭了事务，异步逻辑额外需要数据库操作的情景需要该配置)
        jpaPropertyMap.put(AvailableSettings.ENABLE_LAZY_LOAD_NO_TRANS, true);
        // 自动建表遇到外键关联时，尽可能地不创建数据层面的外键约束(此配置项并非全局生效，部分功能使用后会强制创建外键)
        jpaPropertyMap.put(AvailableSettings.HBM2DDL_DEFAULT_CONSTRAINT_MODE, ConstraintMode.NO_CONSTRAINT.name());
        // 允许不开启事务而进行数据库写操作
        jpaPropertyMap.put(AvailableSettings.ALLOW_UPDATE_OUTSIDE_TRANSACTION, true);
        // sql 监控输出内容 格式化
        jpaPropertyMap.put(AvailableSettings.FORMAT_SQL, true);
        // sql 监控输出内容 关键字高亮
        jpaPropertyMap.put(AvailableSettings.HIGHLIGHT_SQL, true);
        return entityManagerFactoryBean;
    }

    @Bean("webAppTransactionManager")
    public PlatformTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {
        JpaTransactionManager jpaTransactionManager = new JpaTransactionManager();
        jpaTransactionManager.setEntityManagerFactory(entityManagerFactory);
        return jpaTransactionManager;
    }
}
